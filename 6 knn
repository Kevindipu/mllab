import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from scipy.spatial.distance import cdist
from sklearn.metrics import accuracy_score

# Load Glass dataset
glass = pd.read_csv("glass.csv")
glass_X = glass.drop("Type", axis=1)
glass_y = glass["Type"]

# Define distance metrics

def euclidean_distance(x1, x2):

    return np.sqrt(np.sum((x1 - x2) ** 2))

# Define KNN classifier

def KNN_classifier(X_train, y_train, X_test, k, distance_metric):

    y_pred = []

    for i in range(X_test.shape[0]):

        distances = cdist(X_train, [X_test.iloc[i]], metric=distance_metric)

        nearest_indices = np.argsort(distances, axis=0)[:k].flatten()

        nearest_labels = y_train.iloc[nearest_indices]

        label_counts = np.bincount(nearest_labels)

        predicted_label = np.argmax(label_counts)

        y_pred.append(predicted_label)

    return y_pred

# Define function to split dataset into training and testing

def split_data(X, y, method):

   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
   return X_train, X_test, y_train, y_test

# Run KNN classifier for Glass dataset

for method in ["70-30"]:

    print(f"Results for Glass dataset using {method} split and Euclidean distance:")

    X_train, X_test, y_train, y_test = split_data(glass_X, glass_y, method)

    for k in [3]:

        y_pred = KNN_classifier(X_train, y_train, X_test, k, euclidean_distance)

        print(f"k={k}: Accuracy = {accuracy_score(y_test, y_pred)}")

    print()
